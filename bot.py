import os
import asyncio
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

# --- –£–¥–∞–ª—è–µ–º proxy-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –î–û –∏–º–ø–æ—Ä—Ç–∞ openai ---
for proxy_var in ["http_proxy", "https_proxy", "HTTP_PROXY", "HTTPS_PROXY"]:
    if proxy_var in os.environ:
        del os.environ[proxy_var]

# --- Monkey patch –¥–ª—è OpenAI: —É–±–∏—Ä–∞–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç proxies ---
import openai

_old_client_init = openai.OpenAI.__init__


def _patched_init(self, *args, **kwargs):
    kwargs.pop("proxies", None)
    return _old_client_init(self, *args, **kwargs)


openai.OpenAI.__init__ = _patched_init

from openai import OpenAI

# --- –¢–æ–∫–µ–Ω—ã –∏–∑ Environment Variables ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ TELEGRAM_TOKEN –∏ OPENAI_API_KEY –≤ Render Environment Variables")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
app = Flask(__name__)


@app.route("/")
def home():
    return "‚úÖ Telegram ChatGPT –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render!"


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π –∫ ChatGPT!")


@dp.message()
async def chatgpt_handler(message: Message):
    user_text = message.text.strip()
    await message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç."},
                {"role": "user", "content": user_text},
            ],
        )
        reply = response.choices[0].message.content
        await message.answer(reply)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def start_bot():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)


# --- Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    asyncio.get_event_loop().run_until_complete(start_bot())
